package com.company.factory;

/**
 * @author 18190
 * @Date: 2021/8/16  9:34
 * @VERSION 1.0
 */

/**
 *  简单工厂方法 是将生产的所有手机放到一个工厂中  这个工厂只可以生产手机  将其他类型的产品的简单工厂整合起来 也可以生产出所有的产品  但是它不符合开闭原则
 *
 *  工厂模式  是将简单工厂方法的 一条if-else语句  转换为 一个具体的工厂类  简单工厂一个if-else语句生产一个产品  工厂模式的一个具体的工厂生产一个产品  符合开闭原则 但是这也导致具体的工厂类数目太多
 *           一个简单工厂的功能就是 工厂模式一个抽象类的功能
 *
 *  抽象工厂模式  由于工厂模式类增加的太多  所以将几个产品横向组成一个产品族放到一个抽象类中  这样就能减少类的数目   但同时产品族当中如果产品的数目有所改动（增加一个平板生产的方法） 那么将破坏开闭原则
 *              所有之前继承该抽象类的所有工厂类都将进行修改
 *              但如果只是 增加一个产品族的具体类型  比如加个华为的手机、电脑生产 则不会修改之前的代码 符合开闭原则
 *
 *   例如 假设程序需要生产 phone、Computer、ipad这三种电子产品
 *   对于简单工厂：  只需要三个对应的简单工厂，每个简单工厂生产这一类的产品即可（只要 三个简单工厂）
 *   对于工厂模式：  需要三个对应的抽象工厂，每个抽象工厂生产一类的产品，每一个具体工厂实现类只生产一种具体的产品（三个抽象工厂+ 3* 产品族个数）
 *   对于抽象工厂：  只需要一个抽象工厂，每个抽象工厂的实现类都可以生产三种电子产品，这三种电子产品为一个产品族,有多少个产品族就有多少个具体工厂实现类。（一个抽象工厂 + 产品族个数）
 */
public class FactoryConclusion {
}
